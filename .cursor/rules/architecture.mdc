# Cursor Rules for KG-Sentiment Project

## Architecture Documentation

When the user says "generate architecture", "update architecture", "update docs", or similar:

**First delete existing documentation/architecture.md file, then generate a new one following this comprehensive approach:**

### **1. Start with High-Level Overview**
- Describe the system as a state-driven, multi-stage data processing pipeline
- Explain the core pattern: `RAW → SUMMARIZE → CATEGORIZE → Complete`
- Highlight key design patterns: state-driven processing, endpoint pattern, flow orchestration

### **2. Interactive Flow: Explain → Visualize → Explain → Visualize**

**Follow this pattern throughout the document:**

#### **A. High-Level System Overview**
- Explain the state-driven pipeline concept
- **Immediately show**: Project Directory Tree (text-based) showing key directories and their purposes
- **Then show**: System Architecture Diagram (Mermaid) with major components and data flow

#### **B. Pipeline Flow & State Management** 
- Explain how items move through stages (RAW → SUMMARIZE → CATEGORIZE)
- **Immediately show**: Pipeline State Flow Diagram (Mermaid) with stage transitions

#### **C. Data Models & Relationships**
- Explain the domain models and their purposes
- **Immediately show**: Data Model Class Diagram (Mermaid) with relationships

#### **D. Processing Components**
- Explain how each endpoint and processor works
- **Immediately show**: Component Interaction Diagram (Mermaid) showing key interactions

#### **E. Complete Workflow Example**
- Explain a typical end-to-end processing flow
- **Immediately show**: Sequence Diagram (Mermaid) showing User → Flow → Task → Pipeline → Storage

#### **F. Technology & Patterns Summary**
- Explain the tech stack and design patterns
- **Immediately show**: Technology Stack Table

### **3. Visual Requirements for Each Diagram**

- **Project Directory Tree**: Show key directories with brief descriptions, use tree-like structure with indentation, focus on `src/`, `flows/`, `tasks/`, `data/`
- **System Architecture Diagram**: Group by layer (Orchestration, Pipeline, Processing, Storage), use actual file/class names
- **Pipeline State Flow Diagram**: Extract stages from pipeline_config.py, add brief notes on each stage
- **Data Model Class Diagram**: Parse src/schemas.py for Pydantic models and Enums, show relationships and key field types
- **Component Interaction Diagram**: Show how endpoints, processors, and data loaders interact
- **Sequence Diagram**: Show User → Flow → Task → Pipeline → Component → Storage flow with actual method calls

### **4. Style Guidelines**
- **Alternate explanation and visualization** - never have more than 2-3 paragraphs without a diagram
- Use specific file paths and function names in both text and diagrams
- Explain the "what" and "how" of each component before showing it visually
- Make diagrams immediately follow their explanations
- Keep text sections focused and concise

---

## General Coding Rules

Follow workspace elegance rules:
- Prefer library solutions over custom code
- Keep docstrings brief and purposeful
- Use list/dict comprehensions
- Write minimal viable solutions
