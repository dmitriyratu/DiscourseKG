---
alwaysApply: true
---

# Jupyter Notebook Test Creation Rule

When creating test files (especially in the `playground/` directory), always create them as Jupyter notebooks (`.ipynb` files) for interactive testing. Follow this pattern:

## Required Structure

1. **Use proper notebook format**: Create `.ipynb` files, not `.py` files
2. **Markdown cells for documentation**: Use markdown cells to explain each section's purpose
3. **Sequential execution**: Structure cells so they can be run in order from top to bottom
4. **Self-contained imports**: Put all imports in the first code cell(s)
5. **Clear output**: Use print statements to show progress and results
6. **Error handling**: Include try-catch blocks with informative error messages
7. **Interactive feedback**: Provide status messages like `✓`, `✗`, `[INFO]`, etc.


## Key Guidelines

- **Create `.ipynb` files** using the edit_notebook tool
- **Use markdown cells** for section headers (## Step 1: Description)
- **Make cells runnable independently** while maintaining logical flow
- **Include comprehensive error handling** with traceback printing
- **Provide visual separators** with `print("=" * 60)` for major sections
- **Show progress indicators** so users know what's happening
- **Include final summary cells** showing test results and next steps
- **Add introductory markdown cell** at the top explaining the notebook's purpose

## File Naming Convention

- Use descriptive names: `test_feature_name.ipynb`
- Place in `playground/` directory for interactive testing

## Example Structure

```
Cell 1 (Markdown): # Test Title and Description
Cell 2 (Code): Setup and imports
Cell 3 (Markdown): ## Step 1: First Test Section
Cell 4 (Code): First test code
Cell 5 (Markdown): ## Step 2: Second Test Section
Cell 6 (Code): Second test code
...
Cell N (Markdown): ## Summary
Cell N+1 (Code): Summary statistics and results
```

This approach ensures all tests are interactive, well-documented, and easy to run in Jupyter, VS Code, or any notebook environment.
