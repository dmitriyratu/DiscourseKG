# Cursor Rules for KG-Sentiment Project

## Architecture Documentation

When the user says "update architecture", "update docs", or similar:

First delete existing documentation/architecture.md file, then

### Generate documentation/architecture.md with:

1. **Header** - Title, timestamp, one-line project description

2. **Component Summary Table**
   - Count flows, tasks, pipelines, processors, models, enums
   - List names only (no descriptions)

3. **System Architecture Diagram (Mermaid)**
   - Show major components and data flow
   - Use actual file/class names from code
   - Group by layer (Orchestration, Pipeline, Processing, Storage)
   - Keep it clean and readable

4. **Pipeline State Flow Diagram (Mermaid)**
   - Extract stages from pipeline/config.py
   - Show: RAW → SUMMARIZE → CATEGORIZE → Complete
   - Add brief notes on each stage

5. **Data Model Class Diagram (Mermaid)**
   - Parse src/schemas.py for Pydantic models and Enums
   - Show relationships between models
   - Include key field types

6. **Sequence Diagram (Mermaid)**
   - Show one typical flow execution
   - User → Flow → Task → Pipeline → Component → Storage

7. **Data Flow & Integration** (focus on the journey)
   - How data enters the system (scrape_flow → raw JSON)
   - How flows orchestrate processing (which calls what)
   - How tasks route data between stages
   - What transformations happen at each stage (input → output)
   - How state tracking enables the pipeline (PipelineStateManager role)
   - Use bullet points showing data flow, not component catalogs

8. **Technology Stack Table**
   - Layer | Technology | Purpose (one phrase)

9. **Directory Structure** - ASCII tree with brief labels

10. **Key Design Patterns** - 3-5 patterns, one sentence each

11. **Data Flow Summary** - Bullet points showing pipeline stages

### Style:
- Be concise - one sentence or bullet point per concept
- No redundant information
- Focus on "what" and "how", skip "why" unless critical
- Use tables and lists over paragraphs
- Skip obvious explanations

---

## General Coding Rules

Follow workspace elegance rules:
- Prefer library solutions over custom code
- Keep docstrings brief and purposeful
- Use list/dict comprehensions
- Write minimal viable solutions
